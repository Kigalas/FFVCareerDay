# -*- coding: utf-8 -*-

from colour import Color

# data = '000000008c31ff7f00008e76e965455100004551244505390000a3184531211d6009e64d4531e42400008e760756453100004511a325a7610000a318a325211d6009b13e2b326725261d91252d1dca142104314a8c310821f6625a6f8414c61460097246aa088414c810100d6c39b6292104d02d8d252a1d0719313e8c29c6146009ca224422a4210219fa0c5c2b6c392104333a8d2d2921d74e3a5bc510c6146009b13e2b326725261d333a8d2d29212104342ed0218e196c193a5bd74ec6146009333ad12d6e210b15a904670421045a5ff65298224e5e8949291ada1522006009f42d4f19eb103b42fa0c492344222104f7627352ef41071d5c2b9822d2190825a5143f539f3eff7fff0338027401ff7ddf3c5f01e36cd97cce7d111f8002ce39a5143f539f3eff7fff03962ece7d1b001b196e1d94524053203e137d1070ce39a514ff7f176b515eee414c391436db367e0048115b0340577700fc7dae4dce39a514ff7fff333f025f017e001a00fc43b433111f8002507f907ece7dec6c0825a5143f539f3eff7fff0338027401ff7ddf3c5f01e36cd97cce7d111f8002ce39a5143f539f3eff7fff03962ece7d1b001b196e1d94524053203e137d1070ce39a514ff7f176b515eee414c391436db367e0048115b0340577700fc7dae4dce39a514ff7fff333f025f017e001a00fc43b433111f8002507f907ece7dec6c'
#data = '0000b72e5422b1154c0d090dc7046504396b7352ec41280ec00960052001230000001863734ece392921a5144208ff404e09c009600520017d47f93a962e121a200c6040ec764772a565e258a14c62143b3f972a161e4c0dc704a61a6005200100007e4b5957b43e312a49198604cd62e54964399415b20cb70112036005200100004e7b2b4644298872c565a5101027f0228d16280ec00960052001e258a1480000bf4f7d475c433b3f1a3bc009600520015a6b94528c31d1250b0da80064000200bf4f7d475c433b3f1a3b962a121ab2092e01e70cf17ee769e2586005200102001863ce39b115c565090da14829216502030ac00960052001e000800023000825a5143f539f3eff7fff0338027401ff7ddf3c5f01e36cd97cce7d111f8002ce39a5143f539f3eff7fff03962ece7d1b001b196e1d94524053203e137d10706009630cff7f3f27f27e5f1aec59092d000000000000000000000000000000006009a514ff7f592ed531751dff2f1f3f0000000000000000757f907ece7dec6c0000557f137fd17e8f7e6e7a4c7a2b76e975a8756671256de36881644060005cce39a5143f539f3eff7fff03962ece7d1b001b196e1d94524053203e137d1070ce39a514ff7f176b515eee414c391436db367e0048115b0340577700fc7dae4dce39a514ff7fff333f025f017e001a00fc43b433111f8002507f907ece7dec6c'
data = '''00000000ce39ff7f000000000821ef3d
00000000ce397f0300000000ff407f2e
00004001c721c755c4155201cf00e002
c005007e000680012a628d72117b987f
60090000c311c20dc005f22df129d129
b025e511c519c415c20dc721c61dc415
0000ff7f000000000000000000000000
00000000000000000000000000000000
6b2d42087b73b65e31468b31e71cd71a
90159319263dcb5de90cbb26787f8424
6b2d441000003621ba4abf278e25631c
c52808358b41ef4d5262387f00000000
0000421053364d1dc71ce17ec51c5f2f
6b2d441000003621ba4abf278e25631c
6009210894527f02c802f213ff03ff7f
4208ff6fbf2e9a112e7e86593504ed00
6009210894527f02c802f213ff03ff7f
600900001700180dff01ff03e003e07f
80010000ff7f3967f75e8c311042de7b
8001841055015f03607e807f007dff7f
6009210894527f02c802f213ff03f213
6009210894527f02c802f213ff03f213
8c31130017007f009f01ff02ff03ff7f
8c31130017007f009f01ff02ff03ff7f
00000000000000000000000000000000
00000000000000000000000000000000
f73e8410ff7f60551f4755211f02b900
1c26d110f8210e6e5e43ff6b0a4dd110
19218410ff7f00693f531f03567a2d79
3f3adb0dff3f7f405f035f72a51ee53b
a0028410ff7fa621fe4ab95180026005
3b2e50493c6e7f3fff6b3616ce2dd110'''

# Map palette = $000C00
# Battle palette = $7E7E00
# Corresponds with All of CGRAM 

data = data.replace("\n","")

ratio = 31/255
inverse_ratio = 1/ratio
scale = 16
num_of_bits = 16

def desaturate(byte):
    #print("---------------------------------")
    #print("Byte: "+byte)
    byte = byte[2:4] + byte[0:2] #little endian smh
    bits = bin(int(byte, scale))[2:].zfill(num_of_bits)
    r_bits = bits[1:6]
    g_bits = bits[6:11]
    b_bits = bits[11:16]
    r_convert = hex(round(int(r_bits,base=2)*inverse_ratio))[2:].zfill(2)
    g_convert = hex(round(int(g_bits,base=2)*inverse_ratio))[2:].zfill(2)
    b_convert = hex(round(int(b_bits,base=2)*inverse_ratio))[2:].zfill(2)
    rgb_str = "#" + r_convert + g_convert + b_convert
    c = Color(rgb_str)
    #print("Initial colour: "+c.get_hex())
    temp_sat = c.saturation - 0.3
    if temp_sat <= 0:
        temp_sat = 0
    c.saturation = temp_sat
    new_rgb_str = c.get_hex().replace("#","")
    if len(new_rgb_str) == 3:
        new_rgb_str = new_rgb_str[0] + new_rgb_str[0] + new_rgb_str[1] + new_rgb_str[1] + new_rgb_str[2] + new_rgb_str[2]
    
    #print("Adjusted colour: #"+new_rgb_str)
    new_r = bin(round(int(new_rgb_str[0:2],base=16)*ratio))[2:].zfill(5)
    new_g = bin(round(int(new_rgb_str[2:4],base=16)*ratio))[2:].zfill(5)
    new_b = bin(round(int(new_rgb_str[4:6],base=16)*ratio))[2:].zfill(5)
    final_bits = "0" + new_r + new_g + new_b
    final_byte = hex(int(final_bits,base=2))[2:].zfill(4)
    final_byte = final_byte[2:4] + final_byte[0:2]
    #print("Final byte: "+final_byte)
    return final_byte


n = 4
byte_list = [data[i:i+n] for i in range(0, len(data), n)]

new_bytes = []
for byte in byte_list:
    new_bytes.append(desaturate(byte))
    
#byte = 'FF7F'
#byte = desaturate(byte)
#new_bytes = [byte]

final_str = ''
for byte in new_bytes:
    final_str = final_str + byte
    
print(final_str)